#+TITLE: Simple web application to manage reservations for Italian Dinner

* Introduction

This is a simplistic set of CGI scripts adapted for my web host and as a
learning exercise to see how much features and ease-of-use a web framework
deliver.

See also [[file+emacs:app/gestion/index.org][usage instructions and checklists (in French)]].

* Deployment

Use the ~deploy.sh~ script like this:
#+begin_src shell :exports code
  ./deploy.sh 'user@host' 'username' 'groupname' 'destination_folder'
#+end_src

- ~user@host~ :: anything that `ssh` accepts.
- ~username~ and ~groupname~ :: CGI scripts are only executed if they belong
  to a specific user/group that does not correspond to the user/group of the
  system where development happens.  These parameters set the user/group in
  the destination.
- ~destination_folder~ :: where to deploy.

** Dynamic input form
There is a [[file+emacs:input-form/][Fable/Elmish application]] that is deployed next to these CGI scripts
that generates an input form dynamically.
#+begin_example
  <div id="elmish-app"></div>
  <script>
    const ACTION_DEST = 'https://your-host/.../post_reservation.cgi';
    const CONCERT_DATE = '1234-56-78';</script>
  <script src="http://your-host/.../main.js"></script>
#+end_example
** Static input form
Host an HTML form that will =POST= its content to the =post_reservation.cgi=
script:
#+begin_example
  <form action="https://YOUR_HOST/DEPLOYMENT_DIR/post_reservation.cgi" method="POST">
    <input name="date" type="hidden" value="2099-01-01">
    <label for="name">Nom:</label><br>
    <input id="name" style="width: 100%;" name="name" required="required" type="text" placeholder="Il est obligatoire de saisir votre nom"><br>
    <label for="email">Email:</label><br>
    <input id="email" style="width: 100%;" name="email" required="required" type="email" placeholder="Nous pourrions avoir besoin de votre email pour le tracing"><br>
    <label for="places">Nombre de convives:</label><br>
    <input id="places" name="places" type="number"><p></p>
    <ul>
      <li>Entrées
        <ol>
        <li><label style="display: inline-block; width: 14em;" for="assiettes">Assiette italienne (8€):</label> <input id="assiettes" style="width: 5em;" max="20" min="0" name="assiettes" type="number" value="0"></li>
        <li><label style="display: inline-block; width: 14em;" for="fondus">Croquettes au fromage (8€):</label> <input id="fondus" style="width: 5em;" max="20" min="0" name="fondus" type="number" value="0"></li>
        </ol>
      </li>
      <li>Plats
        <ol>
        <li><label style="display: inline-block; width: 14em;" for="bolo">Spaghetti Bolognaise (10€):</label> <input id="bolo" style="width: 5em;" max="20" min="0" name="bolo" type="number" value="0"></li>
        <li><label style="display: inline-block; width: 14em;" for="scampis">Spaghetti aux scampis (15€):</label> <input id="scampis" style="width: 5em;" max="20" min="0" name="scampis" type="number" value="0"></li>
        </ol>
      </li>
      <li>Desserts
        <ol>
        <li><label style="display: inline-block; width: 14em;" for="tiramisu">Tiramisu Maison (5€):</label> <input id="tiramisu" style="width: 5em;" max="20" min="0" name="tiramisu" type="number" value="0"></li>
        <li><label style="display: inline-block; width: 14em;" for="tranches">Tranche Napolitaine (5€):</label> <input id="tranches" style="width: 5em;" max="20" min="0" name="tranches" type="number" value="0"></li>
        </ol>
      </li>
    </ul>
    <div style="display: grid;">
      <div style="grid-row: 1; grid-column: 1;"><input id="gdpr_accepts_use" name="gdpr_accepts_use" type="checkbox" value="true"></div>
      <div style="grid-row: 1; grid-column: 2;"><label for="gdpr_accepts_use">J’autorise la Société Royale d’Harmonie de Braine-l’Alleud à utiliser mon adresse email pour m’avertir de ses futures activités.</label></div>
    </div>
    <input type="submit" value="Confirmer">
  </form>
#+end_example

* Test mode
There are 4 dates for the dinner: 2 fake dates in 2099 and the 2 real dates
in 2022.

The trick to be able to book dates for the fake dates is that the name must
start with ~Test~ and that the email address must end with ~@example.com~.

There are some automated test in [[file+emacs:tests/tests.sh][this shell script]].  It exercises various
end-points and compares the HTML output with known good HTML output.  The
tests are unfortunately not real unit tests: they have to be run in sequence
as the state of one test is often assumed in the next test.

* Limitations
- No maximum number of seats per concert enforced.
- Minimal validation on name and email: we count on the fact that few people
  will find the form and that we will weed out fake registrations by seeing
  who pays.
